install.packages("tidyverse")
install.packages("jsonlite")
setwd("~/Local/R_Analysis")
setwd("~/Local/R_Analysis/01_Demo")
x <- 3
numlist <- c(0,1,2,3,4,5,6,7,8,9)
?read.csv
demo_table <- read.csv(file='demo.csv', check.names=F, stringsAsFactors=F)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table1 <- fromJSON(txt='demo.json')
View(demo_table1)
demo_table[3,"Year"]
demo_table$"Vehicle_Class"
filter_table <- demo_table1[demo_table1$price > 10000,]
View(filter_table)
$subset()
?subset()
filter_table2 <- subset(demo_table1, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
?sample()
library(tidyverse)
?mutate
summarize_demo <- demo_table1 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
View(demo_table1)
View(summarize_demo)
View(demo_table1)
?gather
demo_table3 <- read.csv(file='demo2.csv', check.names=F, stringsAsFactors=F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
second_letter <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (second_letter == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
students <-read_csv("../resources/students.csv")
head(students)
unique(strudents$school_name) #, variable) displays unique elements from that column
unique(students$school_name) #, variable) displays unique elements from that column
schools <- unique(students$school_name) #, variable) displays unique elements from that column
# Use length() to identify the number of schools
school_count <- length(schools)
# Use length() to identify the number of schools
school_count <- length(schools)
school_count
# nrow() returns the number of rows
student_count = nrow(students)
paste("There are a total of", student_count, "students.")
?gather()
?spread()
?gather()
?pivot_longer()
?spread()
wide_table <- long_table %>% spread(key="Metric", value="Score")
View(wide_table)
all.equal(demo_table3,wide_table)
demo_table3 <- demo_table3[,order(colnames(table))]
?order()
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt _geom_bar()
plt <- geom_bar()
View(plt)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
?geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with label
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
# Plot line chart of summary MPG for Toyota
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
# Plot Scatter plot of Displacement vs. fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
View(mpg_summary)
# Plot Scatter plot of Displacement vs. fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
# Plot Scatter plot of Displacement vs. fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class, shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive") #add scatter plot with labels
# Plot Scatter plot of Displacement vs. fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class, shape=drv, size=cty)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive", size="City Fuel Efficuency (MPG)") #add scatter plot with labels
# Bow and Whisker plot
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
# Bow and Whisker plot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill="blue", color="green") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill="lightblue", color="green") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill="lightblue", color="navy") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill="lightblue", color="navy", outlier.color="red") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill="lightblue", color="navy", outlier.color="red", linetype = "dashed") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill="lightblue", color="navy", outlier.color="red", linetype = "dotted") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
# Heat Map
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
View(mpg_summary)
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
# Layers
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
# Layer points plot and error bars
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
# Faceting
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
# Faceting
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
# Faceting (part 2 - WITH faceting)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
# Skill Drill - Create additional facet_wrap plots
plt <- ggplot(mpg,aes(x=manufacturer,y=city))
plt + geom_boxplot()
# Skill Drill - Create additional facet_wrap plots
plt <- ggplot(mpg,aes(x=manufacturer,y=cty))
plt + geom_boxplot()
# Skill Drill - Create additional facet_wrap plots
plt <- ggplot(mpg,aes(x=manufacturer,y=cty, color=trans))
plt + geom_boxplot()
# Skill Drill - Create additional facet_wrap plots
plt <- ggplot(mpg,aes(x=manufacturer,y=cty, color=drv))
plt + geom_boxplot()
plt + geom_boxplot() + facet_wrap(vars(drv))
plt + geom_boxplot() + facet_wrap(vars(drv)) + theme(axis.text.x=element_text(angle=90,hjust=1))
plt + geom_boxplot() + facet_wrap(vars(drv)) + theme(axis.text.x=element_text(angle=90,hjust=.5))
plt + geom_boxplot() + facet_wrap(vars(drv)) + theme(axis.text.x=element_text(angle=90,hjust=1))
plt + geom_boxplot() + facet_wrap(vars(drv)) + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
plt + geom_boxplot() + facet_wrap(vars(drv, cyl)) + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
plt + geom_point() + facet_wrap(vars(drv, cyl)) + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
## Module 15.4
#Test for normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
shapiro.test(mtcars$wt)
setwd("~/Local/DataBootcamp/In_Class_Materials/2021_03_18/3-18-21-Unsolved")
setwd("~/Local/DataBootcamp/In_Class_Materials/2021_03_18/3-18-21-Unsolved/03-Stu_Sardines")
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="/Resources/sardines.csv")
sardines <- read.csv(file="/Resources/sardines.csv")
setwd("~/Local/DataBootcamp/In_Class_Materials/2021_03_18/3-18-21-Unsolved")
sardines <- read.csv(file="/Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Local/DataBootcamp/In_Class_Materials/2021_03_18/3-18-21-Unsolved/03-Stu_Sardines")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Local/DataBootcamp/In_Class_Materials/2021_03_18/3-18-21-Unsolved/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="../Resources/sardines.csv")
View(sardines)
View(sardines)
?sample_n()
setwd("~/Local/R_Analysis/01_Demo")
## Module 15.6
# Sampling
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
View(population_table)
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
# t-test
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
# t-test (two sample)
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
# t-test (paired)
mpg_data <- read.csv('mpg_modified.csv') #import dataset
> mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
# ANOVA test
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt)) #compare means across multiple levels
?cor()
head(mtcars)
# Correlation
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
head(used_cars)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
# Corelation Matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
?lm()
# Linear Regression
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear Regression - Multiple regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
lm(qsec ~ disp + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ disp + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
# Chi Squared test
table(mpg$class,mpg$year) #generate contingency table
mpg
# Chi Squared test
tbl <- table(mpg$class,mpg$year) #generate contingency table
hisq.test(tbl) #compare categorical distributions
chisq.test(tbl) #compare categorical distributions
setwd("~/Local/DataBootcamp/R_Analysis/MechaCar_Statistical_Analysis")
library(tidyverse)
library(dplyr)
# DELIVERABLE 1
# Import MechaCar_mpg.csv as a dataframe
mpg_df <- read.csv(file='MechaCar_mpg.csv', check_names=F, stringsAsFactors=F)
?read.csv()
# DELIVERABLE 1
# Import MechaCar_mpg.csv as a dataframe
mpg_df <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
View(mpg_df)
# Perform linear regression using the lm() function
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value and the r-sqared value using summary()
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df))
# DELIVERABLE 2
# Import Suspension_coil.csv as a table
suspension_df <- read.csv(file='Suspension_Coil.csv', check.names=F, stringsAsFactors=F)
View(suspension_df)
$summarize()
?summarize()
# Crate the total_summary dataframe using summarize() to get the mean, median, variance
# and standard deviation
total_sumary = summarize(suspension_df)
total_sumary
View(total_sumary)
View(total_sumary)
# Crate the total_summary dataframe using summarize() to get the mean, median, variance
# and standard deviation
total_sumary = summarize(suspension_df$PSI)
# Crate the total_summary dataframe using summarize() to get the mean, median, variance
# and standard deviation
total_sumary <- summarize(suspension_df)
View(total_sumary)
# Crate the total_summary dataframe using summarize() to get the mean, median, variance
# and standard deviation
total_sumary <- suspension_df %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
View(total_sumary)
# Create a lot_summary dataframe using group_by() and summarize() to group each manufacturing
# lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
setwd("~/Local/DataBootcamp/R_Analysis/MechaCar_Statistical_Analysis")
# Create a lot_summary dataframe using group_by() and summarize() to group each manufacturing
# lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
# DELIVERABLE 3
# Determine if the PSI across all manufacturing lots is statistically different from the population mean
t.test(suspension_df)
?t.test()
# DELIVERABLE 3
# Determine if the PSI across all manufacturing lots is statistically different from the population mean
t.test(suspension_df$PSI)
# Determine if the PSI for each manufacturing lot is statistically different from the population mean
suspension_lot1 <- subset(suspension_df, Manufacturing_Lot == Lot1)
# Determine if the PSI for each manufacturing lot is statistically different from the population mean
suspension_lot1 <- subset(suspension_df, Manufacturing_Lot == 'Lot1')
View(lot_summary)
View(suspension_lot1)
suspension_lot2 <- subset(suspension_df, Manufacturing_Lot == 'Lot2')
suspension_lot3 <- subset(suspension_df, Manufacturing_Lot == 'Lot3')
t.test(suspension_lot1$PSI)
t.test(suspension_lot2$PSI)
t.test(suspension_lot3$PSI)
t.test(suspension_lot1$PSI, mu=mean(suspension_df$PSI))
t.test(suspension_lot2$PSI, mu=mean(suspension_df$PSI))
t.test(suspension_lot3$PSI, mu=mean(suspension_df$PSI))
# DELIVERABLE 3
# Determine if the PSI across all manufacturing lots is statistically different from the population mean
t.test(suspension_df$PSI)
# DELIVERABLE 3
# Determine if the PSI across all manufacturing lots is statistically different from the population mean
t.test(suspension_df$PSI, mu=mean(suspension_df$PSI))
